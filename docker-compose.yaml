version: "3.9"
services:
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:11
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./_docker/postgres/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 15
      start_period: 5s

  hive-metastore:
    container_name: hive-metastore
    hostname: hive-metastore
    image: starburstdata/hive:3.1.3-e.13
    ports:
      - '9083:9083' # Metastore Thrift
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://postgres:5432/metastore
      HIVE_METASTORE_USER: hive
      HIVE_METASTORE_PASSWORD: hive
      HIVE_METASTORE_WAREHOUSE_DIR: s3://datalake/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_PATH_STYLE_ACCESS: "true"
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
      REGION: "us-east-1"
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    volumes:
      - "./_docker/minio/persist:/data"
    command: [server, /data, --console-address, ":9001"]
    container_name: minio
    environment:
      - "MINIO_ROOT_USER=${MINIO_USER:-minioadmin}"
      - "MINIO_ROOT_PASSWORD=${MINIO_PASSWORD:-minioadmin}"
      - "MINIO_DOMAIN=${MINIO_DOMAIN:-minio}"
    healthcheck:
      interval: 5s
      retries: 3
      test: [CMD, mc, ready, local]
      timeout: 5s
    image: "quay.io/minio/minio:${MINIO_VERSION:-RELEASE.2024-06-04T19-20-08Z}"
    ports:
      - "9000:9000"
      - "9001:9001"

  minio-job:
    image: 'minio/mc'
    container_name: minio-job
    hostname: minio-job
    entrypoint: |
      /bin/bash -c "
      sleep 5;
      /usr/bin/mc config --quiet host add myminio http://minio:9000 minioadmin minioadmin || true;
      /usr/bin/mc mb --quiet myminio/datalake || true;
      "
    environment:
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - S3_ENDPOINT=http://minio:9000
      - S3_PATH_STYLE_ACCESS=true
    depends_on:
      - minio

  opensearch:
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION:-2.15.0}
    container_name: opensearch
    environment:
      discovery.type: single-node
      node.name: opensearch
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
      DISABLE_INSTALL_DEMO_CONFIG: true
      DISABLE_SECURITY_PLUGIN: true
    volumes:
      - ./_docker/elasticsearch/persist/opensearch-data:/usr/share/opensearch/data
    ports:
      - 9200:9200
      - 9600:9600

  ranger:
    image: apache/ranger:2.5.0
    container_name: ranger
    environment:
      - RANGER_DB_PORT=5432
    depends_on:
      - postgres
      - opensearch
    ports:
      - "6080:6080"
    volumes:
      - ./_docker//ranger/ranger-admin-install.properties:/opt/ranger/admin/install.properties:Z,ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6080"]
      interval: 30s
      timeout: 10s
      retries: 5

  lldap:
    image: lldap/lldap:stable
    container_name: lldap
    ports:
      - "3890:3890"
      - "17170:17170"
    environment:
      - UID=1000
      - GID=1000
      - TZ=Asia/Seoul
      - LLDAP_DATABASE_URL=postgres://ldap:ldap@postgres:5432/ldap
      - LLDAP_JWT_SECRET=jhgfdfjkhgsdfghlushdvndkfjnsd
      - LLDAP_KEY_SEED=ioajerjgosdfvnsdufghbsiudhgjfdvn
      - LLDAP_LDAP_USER_EMAIL=admin@example.com
      - LLDAP_LDAP_USER_PASS=changeme
      - LLDAP_LDAP_BASE_DN=dc=example,dc=com

      # envs required for bootstrap.sh
      - LLDAP_URL=http://localhost:17170
      - LLDAP_ADMIN_USERNAME=admin
      - LLDAP_ADMIN_PASSWORD=changeme
      - USER_CONFIGS_DIR=/bootstrap/user-configs
      - GROUP_CONFIGS_DIR=/bootstrap/group-configs
      - DO_CLEANUP=true
    volumes:
      - ./_docker/lldap/persist:/data
      - ./_docker/lldap/bootstrap/bootstrap.sh:/bootstrap/bootstrap.sh
      - ./_docker/lldap/config-users:/bootstrap/user-configs
      - ./_docker/lldap/config-groups:/bootstrap/group-configs

  keycloak:
    image: keycloak/keycloak:latest
    container_name: keycloak
    ports:
      - 8080:8080
    command: [ "start-dev", "--import-realm" ]
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_DB_URL: "jdbc:postgresql://postgres:5432/keycloak"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_METRICS_ENABLED: true
      KC_LOG_LEVEL: "INFO"
    volumes:
      - ./_docker/keycloak/realm.json:/opt/keycloak/data/import/realm.json:ro
    depends_on:
      postgres:
        condition: service_healthy
